# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop
      - release-**
  release:
    types:
      - published

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install --editable .[dev]
      - name: Lint with black and ruff
        run: |
          black --check .
          ruff .
      - name: Type check with Pyright
        run: pyright
      - name: Build sdist
        run: python -m build --sdist --no-isolation --skip-dependency-check --outdir dist
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  test:
    needs: [lint]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "3.12"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install --editable .[dev]
      - name: Downgrade numpy
        if: ${{ matrix.python-version == '3.7' }}
        run: |
          # test with older numpy version to ensure compatibility
          python -m pip install numpy==1.15
      - name: Test with pytest
        run: |
          pytest -v --benchmark-disable -n auto

  build:
    needs: [test]
    if: "startsWith(github.ref, 'refs/tags/')"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-20.04", "macos-11", "windows-2019"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_SKIP: cp36-* pp*-win* pp*-macosx* *_i686
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64 universal2"
          CIBW_ARCHS_WINDOWS: "AMD64 ARM64"
        with:
          output-dir: dist
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [build]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade twine
          twine upload --skip-existing *
